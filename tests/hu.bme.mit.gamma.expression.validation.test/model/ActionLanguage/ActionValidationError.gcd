package actionlanguage

import "Types/Types.gcd"

const int1 : int
const dec1 : dec
const rec1 : rec

const intRange : integer range := <- 0 .. 12 ->

type MyEnum : enum {
	A, B, C
}

type MyEnum2 : enum {
	A, B, C
}

const dir : Direction
const cPoint : CardianalPoints

const bool : boolean


// ERROR


/**
 * We expect the type of procedure and the type of return statement to be the same
 * 
 * @Check - checkReturnStatementType
 */
procedure proc0 () : integer { return 1.1; }
procedure proc1 () : decimal { return int1; }
procedure proc2 () : int { return rec1; }
procedure proc3 () : rational { return; }
procedure proc4 () : Direction { return cPoint; }
procedure proc5 () : Direction { return CardianalPoints::NORTH; }


/**
 * We expect return statements to be final operations on all possible execution paths
 * 
 * @Check - checkReturnStatementPositions
 */
procedure proc6 () : integer {
	if (true) {
		if (true) {
			var a : integer;
			return 1;
		} else {
			if (false) {
				return 1;
			}
		}
	} else {
		switch (true) {
			case false:
				return 1;
			case false:
				var i : integer;
		}
	}
	//
}

/**
 * We expect all procedures to have a return statement, 
 * unless the return type is void
 * 
 * @Check - checkReturnStatementPositions
 */
procedure proc7 () : integer {
	var a : integer;
}

procedure exampleProc() : integer {
	/**
	 * We expect the type of left hand expression be the same as the type of right hand expression
	 * 
 	 * @Check - checkAssignmentActions
 	 */
 	var b : MyEnum;
	var bb : MyEnum2;
	b := bb;
	
	/**
	 * We expect the names of the variables to be unique
	 * 
	 * @Check - checkDuplicateVariableDeclarationStatements
	 */ 
	var a : integer;
	var a : decimal;
	
	
	/**
	 * We expect that no new values can be assigned to the constants
	 * 
	 * @Check - checkAssignmentActions
	 */
	int1 := 12;
	
	
	/**
	 * We expect type of control expression must be same type of guard
	 * 
	 * @Check - checkBranch
	 */
	switch (dir) {
		case 12:
			a = 12;
		case int1:
			a = 12;
	}
	
	/**
	 * We expect every literal to be covered
	 * 
	 * @Check - checkSwitchStatement
	 */
	switch (b) {
		case MyEnum::A:
			a = 12;
	}
	
	/**
	 * We expect type of conditions must be of type boolean
	 * 
	 * @Check - checkBranch
	 */
	if (int1) {
		a = 1;
	}
	elseif (12) {
		a = 2;
	}
	
	choice
	{
		branch [int1] a = 1;
		branch [dir] a = 2;
	}
	
	
	/**
	 * We expect type of parameter must be integer
	 * 
	 * @Check - checkForStatement
	 */
	for (i : dec in <- 0 .. 12->) {
		var b : integer;
	}
	
	/**
	 * We expect type of range must be integer range
	 * 
	 * @Check - checkForStatement
	 */
	for (i : int in dec1) {
		var b : integer;
	}
	
	
	/**
	 * We expect the expression of assert statement must be boolean
	 * 
	 * @Check - checkAssertionStatement
	 */
	assert(int1);
	assert(dir);
	assert(1.1);
	
	return 1;
}
