package target

import "interfaces"
import "activities"
import "dispatchers"
 
scheduled-async System {
	component messageQueue : MessageQueue
	component target : Target
	component dispatcher : Dispatcher
	
	// Hooking up MessageQueue
	channel [ dispatcher.queueControl ] -o)- [ messageQueue.queueControl ]
	channel [ messageQueue.data ] -o)- [ dispatcher.inputData ]
	
	// Hooking up target
	channel [ dispatcher.outputData ] -o)- [ target.data ]
	channel [ target.dispatcherControl ] -o)- [ dispatcher.dispatcherControl ]
	
	// Initialize by executing the Dispatcher component
	initial execute dispatcher
} 

@Asynchronous
statechart MessageQueue [
	port queueControl : requires QueueControl
	
	port data : provides Data
] {
	
	region Main {
		initial Initial
		state _0
		state _1
		state _2
		state _3
	}
	
	transition from Initial to _0
	transition from _0 to _1 when queueControl.next / raise data.start;
	transition from _1 to _2 when queueControl.next / raise data.anotherSignal;
	transition from _2 to _3 when queueControl.next / raise data.continue;
	
}

@RegionSchedule=bottom-up
statechart TargetSC [
	port data : requires Data
	
	port dispatcherControl : provides DispatcherControl
	
	port completion_s1 : provides StatechartCompletion
	port completion_s1_1 : provides StatechartCompletion
	port completion_s2 : provides StatechartCompletion
] {	
	
	region Wrapper {
		initial WrapperInitial
		state WrapperFunction {
			region Main {
				deep history Deep
				state wait
				state S1 {
					entry / log "S1_entry";
					exit / log "S1_exit";
					region S1Region {
						initial S1Initial
						state S1_1  {
							entry / log "S1_1_entry"; raise completion_s1_1.completion;
						}
						state S1_2 {
							entry / log "S1_2_entry";
						}
						state S1Final {
							entry / raise completion_s1.completion;
						}
					}
				}
				state S2 {
					entry / log "S2_entry"; raise completion_s2.completion; 
				}
				state Final
			}
		}
	}
	
	transition from WrapperInitial to WrapperFunction
	
	@Internal
	transition from WrapperFunction to WrapperFunction when data.any / raise dispatcherControl.ignore; // default ignore, without exit-entry
	
	transition "T1" from Deep to wait
	transition "T2" from wait to S1 when data.start / raise dispatcherControl.ready;
		
	transition "T1_1" from S1Initial to S1_1
	transition "T1_2" from S1_1 to S1_2 when completion_s1_1.completion / log "T1_2_effect";
	transition "T1_3" from S1_2 to S1Final when data.continue / raise dispatcherControl.ready;
	transition "T3" from S1_2 to Deep when data.anotherSignal / log "T3_effect"; raise dispatcherControl.ready;
	
	transition "T4" from S1 to S2 when completion_s1.completion
	transition "T5" from S2 to Final when completion_s2.completion
	
}

adapter Target of component target : TargetSC {
	when any / run
	
	queue completionQueue(priority = 2, capacity = QUEUE_SIZE) {
		completion_s1.any,
		completion_s2.any,
		completion_s1_1.any
	}	
	queue dataQueue(priority = 1, capacity = QUEUE_SIZE) {
		data.any
	}
}
