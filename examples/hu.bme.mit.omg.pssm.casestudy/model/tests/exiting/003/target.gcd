package target

import "interfaces"
import "activities"
import "dispatchers"
 
scheduled-async System {
	
	component eventQueue : EventQueue
	component target : Target
	component dispatcher : Dispatcher
	
	// Tester controlling - next, end
	channel [ dispatcher.queueControl ] -o)- [ eventQueue.queueControl ]
	
	// Actual target data propagation
	channel [ eventQueue.data ] -o)- [ dispatcher.inputData ]
	channel [ dispatcher.outputData ] -o)- [ target.data ]
	
	// Scheduler controlling - ready, ignore
	channel [ target.dispatcherControl ] -o)- [ dispatcher.dispatcherControl ]

	initial execute dispatcher

}

@Asynchronous
statechart EventQueue [
	port queueControl : requires QueueControl
	
	port data : provides Data
] {
	
	region Main {
		initial Initial
		state _0
		state _1
		state _2
	}
	
	transition from Initial to _0
	transition from _0 to _1 when queueControl.next / raise data.start;
	transition from _1 to _2 when queueControl.next / raise data.continue;
	
}

@RegionSchedule=bottom-up
statechart TargetSC [
	port data : requires Data
	
	port dispatcherControl : provides DispatcherControl
] {	
	
	region Wrapper {
		initial WrapperInitial
		state WrapperFunction {
			region Main {
				initial Initial
				state wait
				state S1 {
					region S1Region {
						initial S1Initial
						state S1_1 {
							region S1_1Region {
								initial S1_1Initial
								state S1_1_1
								state S1_1Final
							}
							region S1_2Region {
								initial S1_2Initial
								state S1_2_1
								state S1_2Final
							}
						}
					}
				}
				state Final
			}
		}
	}
	
	transition from WrapperInitial to WrapperFunction
	
	@Internal
	transition from WrapperFunction to WrapperFunction when data.any / raise dispatcherControl.ignore; // default ignore, without exit-entry
	
	transition "T1" from Initial to wait
	transition "T2" from wait to S1 when data.start / raise dispatcherControl.ready;
		
	transition "T1_1" from S1Initial to S1_1
	
	transition "T1_1_1" from S1_1Initial to S1_1_1
	transition "T1_1_2" from S1_1_1 to S1_1Final when data.pending / raise dispatcherControl.ready;
		
	transition "T1_2_1" from S1_2Initial to S1_2_1
	transition "T1_2_2" from S1_2_1 to S1_2Final when data.pending / raise dispatcherControl.ready;
		
	transition "T3" from S1 to Final when data.continue / raise dispatcherControl.ready;
	
}

adapter Target of component target : TargetSC {
	when any / run
	
	queue dataQueue(priority = 1, capacity = QUEUE_SIZE) {
		data.any
	}
}
