package trace
import "/hu.bme.mit.omg.pssm/model/tests/common/interfaces.gcd"
import "/hu.bme.mit.omg.pssm/model/tests/behavior/003/target.gcd"
import "/hu.bme.mit.omg.pssm/model/tests/common/activity.gcd"
@Asynchronous
statechart Trace [
	port _testControl_ : provides TestControl
	port testControl : requires TestControl
	port _control_ : provides SUTControl
	port control : requires SUTControl
] {
	var inOutCycleVariable : boolean := false
	region MainRegion {
		initial Initial
		state _0 {
			region InputRegion {
				initial InputInitialState
				state InputState
			}
		}
	}
	region OutputRegion {
		initial OutputInitialState
		state OutputState
		state FirstOutputState
	}
	region InOutCycleRegion {
		initial InOutCycleInitialState
		state InOutCycleState
	}
	transition from Initial to _0
	transition from InputInitialState to InputState
	transition from InputState to InputState when control.continue [inOutCycleVariable] / raise
		_control_.continue;
	transition from InputState to InputState when control.anotherSignal [inOutCycleVariable] / raise
		_control_.anotherSignal;
	transition from InputState to InputState when control.pending [inOutCycleVariable] / raise
		_control_.pending;
	transition from InputState to InputState when control.data [inOutCycleVariable] / raise
		_control_.data(control.data::value);
	transition from InputState to InputState when control.integerData [inOutCycleVariable] / raise
		_control_.integerData(control.integerData::value);
	transition from InputState to InputState when testControl.start [inOutCycleVariable] / raise
		_testControl_.start;
	transition from OutputInitialState to FirstOutputState
	transition from InOutCycleInitialState to InOutCycleState
	transition from InOutCycleState to InOutCycleState when cycle / inOutCycleVariable := not
		inOutCycleVariable;
}