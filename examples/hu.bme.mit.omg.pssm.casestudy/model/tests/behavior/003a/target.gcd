package target

import "interfaces"
import "activities"
import "dispatchers"
 
scheduled-async System {
	
	component eventQueue : EventQueue
	component target : Target
	component dispatcher : Dispatcher
	component doActivity_0 : DoActivity
	
	// Tester controlling - next, end
	channel [ dispatcher.queueControl ] -o)- [ eventQueue.queueControl ]
	
	// Actual target data propagation
	channel [ eventQueue.data ] -o)- [ dispatcher.inputData ]
	channel [ dispatcher.outputData ] -o)- [ target.data ]
	
	// Scheduler controlling - ready, ignore
	channel [ target.dispatcherControl ] -o)- [ dispatcher.dispatcherControl ]
	
	// Hooking up doActivity_0
	channel [ doActivity_0.controller ] -o)- [ target.activity_0 ]
	channel [ doActivity_0.dispatcherControl ] -o)- [ dispatcher.dispatcherControlActivity_0 ]
	channel [ dispatcher.outputDataActivity_0 ] -o)- [ doActivity_0.data ]

	initial execute dispatcher

}

@Asynchronous
statechart EventQueue [
	port queueControl : requires QueueControl
	
	port data : provides Data
] {
	
	region Main {
		initial Initial
		state _0
		state _1
		state _2
	}
	
	transition from Initial to _0
	transition from _0 to _1 when queueControl.next / raise data.start;
	transition from _1 to _2 when queueControl.next / raise data.anotherSignal;
	
}

@RegionSchedule=bottom-up
statechart TargetSC [
	port activity_0 : requires ActivityControllerInterface
	port data : requires Data
	
	port dispatcherControl : provides DispatcherControl	
	
	port completion_error : provides StatechartCompletion
] {	
	
	region Wrapper {
		initial WrapperInitial
		state WrapperFunction {
			region Main {
				initial Initial
				state wait
				state S1 {
					entry / log "S1_entry"; raise activity_0.control(true);
					exit / log "S1_exit"; raise activity_0.control(false);
				}
				state error {
					entry / raise completion_error.completion;
				}
				state FS1
			}
		}
	}
	
	transition from WrapperInitial to WrapperFunction
	
	@Internal
	transition from WrapperFunction to WrapperFunction when data.any / raise dispatcherControl.ignore; // default ignore, without exit-entry
	
	transition "T1" from Initial to wait
	transition "T2" from wait to S1 when data.start / raise dispatcherControl.ready;
	transition "T3" from S1 to error when activity_0.done / log "T3_effect";
	transition "T4" from error to FS1 when completion_error.completion
	transition "T5" from S1 to FS1 when data.anotherSignal / raise dispatcherControl.ready;
	
}

adapter Target of component target : TargetSC {
	when any / run
	
	queue completionQueue(priority = 2, capacity = QUEUE_SIZE) {
		completion_error.any,
		activity_0.any
	}
	queue dataQueue(priority = 1, capacity = QUEUE_SIZE) {
		data.any
	}
}
