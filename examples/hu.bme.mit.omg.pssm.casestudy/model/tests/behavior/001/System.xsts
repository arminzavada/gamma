//@splitted
//@noenv
type MainRegion_Trace : { __Inactive__, _0, _1 }
type InOutCycleRegion_Trace : { __Inactive__, InOutCycleState }
type InputRegion_Trace : { __Inactive__, InputState }
type TraceLogs : { None, t_from_Initial_to__0_effect, t_from_InOutCycleInitialState_to_InOutCycleState_effect, _0_entry, _1_entry, InputState_entry, InOutCycleState_entry, InOutCycleState_exit, t_from_InOutCycleState_to_InOutCycleState_effect, _0_exit, t_from__0_to__1_effect, t_from_InputInitialState_to_InputState_effect, t_from_Choice0_to_InputState_effect, InputState_exit, t_from_InputState_to_Choice0_effect }
type Main_Target : { __Inactive__, S1, FS1 }
type TargetLogs : { None, t_from_Initial_to_S1_effect, S1_entry, FS1_entry, S1_exit, t_from_S1_to_FS1_effect }
var testControl_start_In_Trace : boolean = false
ctrl var mainRegion_Trace : MainRegion_Trace = __Inactive__
ctrl var inOutCycleRegion_Trace : InOutCycleRegion_Trace = __Inactive__
ctrl var inputRegion_Trace : InputRegion_Trace = __Inactive__
var inOutCycleVariable_Trace : boolean = false
var logs_Trace : TraceLogs = None
var testControl_start_In_system : boolean = false
ctrl var main_system : Main_Target = __Inactive__
var logs_system : TargetLogs = None
var __pc : integer = 0
var __trans : boolean = false
var __init : boolean = true

trans {
	assume ((__init == false) && (__trans == true) && (__pc == 0));
	__pc := (if ((mainRegion_Trace == _0) && inOutCycleVariable_Trace) then 2 else 3);
} or {
	assume ((__init == false) && (__trans == true) && (__pc == 2));
	__pc := (if (mainRegion_Trace == _0) then 5 else 4);
} or {
	assume ((__init == false) && (__trans == true) && (__pc == 5));
	logs_Trace := _0_exit;
	__pc := 4;
} or {
	assume ((__init == false) && (__trans == true) && (__pc == 4));
	testControl_start_In_system := true;
	mainRegion_Trace := _1;
	inputRegion_Trace := InputState;
	logs_Trace := InputState_entry;
	__pc := 1;
} or {
	assume ((__init == false) && (__trans == true) && (__pc == 3));
	__pc := (if ((inputRegion_Trace == InputState) && inOutCycleVariable_Trace) then 6 else 1);
} or {
	assume ((__init == false) && (__trans == true) && (__pc == 6));
	__pc := (if (inputRegion_Trace == InputState) then 8 else 7);
} or {
	assume ((__init == false) && (__trans == true) && (__pc == 8));
	logs_Trace := InputState_exit;
	__pc := 7;
} or {
	assume ((__init == false) && (__trans == true) && (__pc == 7));
	inputRegion_Trace := __Inactive__;
	logs_Trace := t_from_InputState_to_Choice0_effect;
	__pc := 9;
} or {
	assume ((__init == false) && (__trans == true) && (__pc == 9));
	__pc := (if testControl_start_In_Trace then 10 else 11);
} or {
	assume ((__init == false) && (__trans == true) && (__pc == 10));
	testControl_start_In_system := true;
	inputRegion_Trace := InputState;
	logs_Trace := InputState_entry;
	__pc := 1;
} or {
	assume ((__init == false) && (__trans == true) && (__pc == 11));
	inputRegion_Trace := InputState;
	logs_Trace := InputState_entry;
	__pc := 1;
} or {
	assume ((__init == false) && (__trans == true) && (__pc == 1));
	__pc := (if (inOutCycleRegion_Trace == InOutCycleState) then 13 else 12);
} or {
	assume ((__init == false) && (__trans == true) && (__pc == 13));
	__pc := (if (inOutCycleRegion_Trace == InOutCycleState) then 15 else 14);
} or {
	assume ((__init == false) && (__trans == true) && (__pc == 15));
	logs_Trace := InOutCycleState_exit;
	__pc := 14;
} or {
	assume ((__init == false) && (__trans == true) && (__pc == 14));
	inOutCycleVariable_Trace := (!(inOutCycleVariable_Trace));
	inOutCycleRegion_Trace := InOutCycleState;
	logs_Trace := InOutCycleState_entry;
	__pc := 12;
} or {
	assume ((__init == false) && (__trans == true) && (__pc == 12));
	testControl_start_In_Trace := false;
	__pc := 16;
} or {
	assume ((__init == false) && (__trans == true) && (__pc == 16));
	__pc := (if ((main_system == S1) && testControl_start_In_system) then 18 else 17);
} or {
	assume ((__init == false) && (__trans == true) && (__pc == 18));
	__pc := (if (main_system == S1) then 20 else 19);
} or {
	assume ((__init == false) && (__trans == true) && (__pc == 20));
	logs_system := S1_exit;
	__pc := 19;
} or {
	assume ((__init == false) && (__trans == true) && (__pc == 19));
	main_system := FS1;
	logs_system := FS1_entry;
	__pc := 17;
} or {
	assume ((__init == false) && (__trans == true) && (__pc == 17));
	testControl_start_In_system := false;
	__pc := 21;
} or {
	assume ((__init == false) && (__trans == true) && (__pc == 21));
	__pc := (if ((mainRegion_Trace == _0) && inOutCycleVariable_Trace) then 23 else 24);
} or {
	assume ((__init == false) && (__trans == true) && (__pc == 23));
	__pc := (if (mainRegion_Trace == _0) then 26 else 25);
} or {
	assume ((__init == false) && (__trans == true) && (__pc == 26));
	logs_Trace := _0_exit;
	__pc := 25;
} or {
	assume ((__init == false) && (__trans == true) && (__pc == 25));
	testControl_start_In_system := true;
	mainRegion_Trace := _1;
	inputRegion_Trace := InputState;
	logs_Trace := InputState_entry;
	__pc := 22;
} or {
	assume ((__init == false) && (__trans == true) && (__pc == 24));
	__pc := (if ((inputRegion_Trace == InputState) && inOutCycleVariable_Trace) then 27 else 22);
} or {
	assume ((__init == false) && (__trans == true) && (__pc == 27));
	__pc := (if (inputRegion_Trace == InputState) then 29 else 28);
} or {
	assume ((__init == false) && (__trans == true) && (__pc == 29));
	logs_Trace := InputState_exit;
	__pc := 28;
} or {
	assume ((__init == false) && (__trans == true) && (__pc == 28));
	inputRegion_Trace := __Inactive__;
	logs_Trace := t_from_InputState_to_Choice0_effect;
	__pc := 30;
} or {
	assume ((__init == false) && (__trans == true) && (__pc == 30));
	__pc := (if testControl_start_In_Trace then 31 else 32);
} or {
	assume ((__init == false) && (__trans == true) && (__pc == 31));
	testControl_start_In_system := true;
	inputRegion_Trace := InputState;
	logs_Trace := InputState_entry;
	__pc := 22;
} or {
	assume ((__init == false) && (__trans == true) && (__pc == 32));
	inputRegion_Trace := InputState;
	logs_Trace := InputState_entry;
	__pc := 22;
} or {
	assume ((__init == false) && (__trans == true) && (__pc == 22));
	__pc := (if (inOutCycleRegion_Trace == InOutCycleState) then 34 else 33);
} or {
	assume ((__init == false) && (__trans == true) && (__pc == 34));
	__pc := (if (inOutCycleRegion_Trace == InOutCycleState) then 36 else 35);
} or {
	assume ((__init == false) && (__trans == true) && (__pc == 36));
	logs_Trace := InOutCycleState_exit;
	__pc := 35;
} or {
	assume ((__init == false) && (__trans == true) && (__pc == 35));
	inOutCycleVariable_Trace := (!(inOutCycleVariable_Trace));
	inOutCycleRegion_Trace := InOutCycleState;
	logs_Trace := InOutCycleState_entry;
	__pc := 33;
} or {
	assume ((__init == false) && (__trans == true) && (__pc == 33));
	testControl_start_In_Trace := false;
	__pc := 0;
	__trans := false;
} or {
	assume ((__init == false) && (__trans == false) && (__pc == 0));
	havoc testControl_start_In_Trace;
	__pc := 1;
} or {
	assume ((__init == false) && (__trans == false) && (__pc == 1));
	__pc := 0;
	__trans := true;
} or {
	assume ((__init == true) && (__pc == 0));
	inOutCycleVariable_Trace := false;
	mainRegion_Trace := __Inactive__;
	inOutCycleRegion_Trace := __Inactive__;
	inputRegion_Trace := __Inactive__;
	testControl_start_In_Trace := false;
	main_system := __Inactive__;
	testControl_start_In_system := false;
	__pc := 1;
} or {
	assume ((__init == true) && (__pc == 1));
	mainRegion_Trace := _0;
	logs_Trace := t_from_InOutCycleInitialState_to_InOutCycleState_effect;
	inOutCycleRegion_Trace := InOutCycleState;
	logs_system := t_from_Initial_to_S1_effect;
	main_system := S1;
	__pc := 2;
} or {
	assume ((__init == true) && (__pc == 2));
	__pc := (if (mainRegion_Trace == _0) then 4 else 5);
} or {
	assume ((__init == true) && (__pc == 4));
	logs_Trace := _0_entry;
	__pc := 3;
} or {
	assume ((__init == true) && (__pc == 5));
	__pc := (if (mainRegion_Trace == _1) then 6 else 3);
} or {
	assume ((__init == true) && (__pc == 6));
	logs_Trace := _1_entry;
	__pc := 7;
} or {
	assume ((__init == true) && (__pc == 7));
	__pc := (if (inputRegion_Trace == InputState) then 8 else 3);
} or {
	assume ((__init == true) && (__pc == 8));
	logs_Trace := InputState_entry;
	__pc := 3;
} or {
	assume ((__init == true) && (__pc == 3));
	__pc := (if (inOutCycleRegion_Trace == InOutCycleState) then 10 else 9);
} or {
	assume ((__init == true) && (__pc == 10));
	logs_Trace := InOutCycleState_entry;
	__pc := 9;
} or {
	assume ((__init == true) && (__pc == 9));
	__pc := (if (main_system == S1) then 12 else 13);
} or {
	assume ((__init == true) && (__pc == 12));
	logs_system := S1_entry;
	__pc := 11;
} or {
	assume ((__init == true) && (__pc == 13));
	__pc := (if (main_system == FS1) then 14 else 11);
} or {
	assume ((__init == true) && (__pc == 14));
	logs_system := FS1_entry;
	__pc := 11;
} or {
	assume ((__init == true) && (__pc == 11));
	__pc := (if ((mainRegion_Trace == _0) && inOutCycleVariable_Trace) then 16 else 17);
} or {
	assume ((__init == true) && (__pc == 16));
	__pc := (if (mainRegion_Trace == _0) then 19 else 18);
} or {
	assume ((__init == true) && (__pc == 19));
	logs_Trace := _0_exit;
	__pc := 18;
} or {
	assume ((__init == true) && (__pc == 18));
	testControl_start_In_system := true;
	mainRegion_Trace := _1;
	inputRegion_Trace := InputState;
	logs_Trace := InputState_entry;
	__pc := 15;
} or {
	assume ((__init == true) && (__pc == 17));
	__pc := (if ((inputRegion_Trace == InputState) && inOutCycleVariable_Trace) then 20 else 15);
} or {
	assume ((__init == true) && (__pc == 20));
	__pc := (if (inputRegion_Trace == InputState) then 22 else 21);
} or {
	assume ((__init == true) && (__pc == 22));
	logs_Trace := InputState_exit;
	__pc := 21;
} or {
	assume ((__init == true) && (__pc == 21));
	inputRegion_Trace := __Inactive__;
	logs_Trace := t_from_InputState_to_Choice0_effect;
	__pc := 23;
} or {
	assume ((__init == true) && (__pc == 23));
	__pc := (if testControl_start_In_Trace then 24 else 25);
} or {
	assume ((__init == true) && (__pc == 24));
	testControl_start_In_system := true;
	inputRegion_Trace := InputState;
	logs_Trace := InputState_entry;
	__pc := 15;
} or {
	assume ((__init == true) && (__pc == 25));
	inputRegion_Trace := InputState;
	logs_Trace := InputState_entry;
	__pc := 15;
} or {
	assume ((__init == true) && (__pc == 15));
	__pc := (if (inOutCycleRegion_Trace == InOutCycleState) then 27 else 26);
} or {
	assume ((__init == true) && (__pc == 27));
	__pc := (if (inOutCycleRegion_Trace == InOutCycleState) then 29 else 28);
} or {
	assume ((__init == true) && (__pc == 29));
	logs_Trace := InOutCycleState_exit;
	__pc := 28;
} or {
	assume ((__init == true) && (__pc == 28));
	inOutCycleVariable_Trace := (!(inOutCycleVariable_Trace));
	inOutCycleRegion_Trace := InOutCycleState;
	logs_Trace := InOutCycleState_entry;
	__pc := 26;
} or {
	assume ((__init == true) && (__pc == 26));
	testControl_start_In_Trace := false;
	__pc := 0;
	__init := false;
	__trans := false;
}
init {
}
env {
}
