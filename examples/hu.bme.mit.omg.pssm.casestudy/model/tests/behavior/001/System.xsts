//@splitted
//@noenv
type MainRegion_Trace : { __Inactive__, _0, _1 }
type InOutCycleRegion_Trace : { __Inactive__, InOutCycleState }
type InputRegion_Trace : { __Inactive__, InputState }
type TraceLogs : { None, t(, t(, _0(entry), _1(entry), InputState(entry), InOutCycleState(entry), InOutCycleState(exit), t(, InOutCycleState(entry), _0(exit), t(, t(, _1(entry), InputState(entry), t(, InputState(entry), t(, InputState(entry), InputState(exit), t( }
type Main_Target : { __Inactive__, S1, FS1 }
type TargetLogs : { None, t(, S1(entry), FS1(entry), S1(exit), t(, FS1(entry) }
var testControl_start_In_Trace : boolean = false
ctrl var mainRegion_Trace : MainRegion_Trace = __Inactive__
ctrl var inOutCycleRegion_Trace : InOutCycleRegion_Trace = __Inactive__
ctrl var inputRegion_Trace : InputRegion_Trace = __Inactive__
var inOutCycleVariable_Trace : boolean = false
var logs_Trace : TraceLogs = None
var testControl_start_In_system : boolean = false
ctrl var main_system : Main_Target = __Inactive__
var logs_system : TargetLogs = None
var __pc : integer = 0
var __trans : boolean = false

trans {
	assume ((__trans == true) && (__pc == 0));
	__pc := (if ((mainRegion_Trace == _0) && inOutCycleVariable_Trace) then 2 else 3);
} or {
	assume ((__trans == true) && (__pc == 2));
	__pc := (if (mainRegion_Trace == _0) then 5 else 4);
} or {
	assume ((__trans == true) && (__pc == 5));
	logs_Trace := _0(exit);
	__pc := 4;
} or {
	assume ((__trans == true) && (__pc == 4));
	testControl_start_In_system := true;
	mainRegion_Trace := _1;
	inputRegion_Trace := InputState;
	logs_Trace := InputState(entry);
	__pc := 1;
} or {
	assume ((__trans == true) && (__pc == 3));
	__pc := (if ((inputRegion_Trace == InputState) && inOutCycleVariable_Trace) then 6 else 1);
} or {
	assume ((__trans == true) && (__pc == 6));
	__pc := (if (inputRegion_Trace == InputState) then 8 else 7);
} or {
	assume ((__trans == true) && (__pc == 8));
	logs_Trace := InputState(exit);
	__pc := 7;
} or {
	assume ((__trans == true) && (__pc == 7));
	inputRegion_Trace := __Inactive__;
	logs_Trace := t(;
	__pc := 9;
} or {
	assume ((__trans == true) && (__pc == 9));
	__pc := (if testControl_start_In_Trace then 10 else 11);
} or {
	assume ((__trans == true) && (__pc == 10));
	testControl_start_In_system := true;
	inputRegion_Trace := InputState;
	logs_Trace := InputState(entry);
	__pc := 1;
} or {
	assume ((__trans == true) && (__pc == 11));
	inputRegion_Trace := InputState;
	logs_Trace := InputState(entry);
	__pc := 1;
} or {
	assume ((__trans == true) && (__pc == 1));
	__pc := (if (inOutCycleRegion_Trace == InOutCycleState) then 13 else 12);
} or {
	assume ((__trans == true) && (__pc == 13));
	__pc := (if (inOutCycleRegion_Trace == InOutCycleState) then 15 else 14);
} or {
	assume ((__trans == true) && (__pc == 15));
	logs_Trace := InOutCycleState(exit);
	__pc := 14;
} or {
	assume ((__trans == true) && (__pc == 14));
	inOutCycleVariable_Trace := (!(inOutCycleVariable_Trace));
	inOutCycleRegion_Trace := InOutCycleState;
	logs_Trace := InOutCycleState(entry);
	__pc := 12;
} or {
	assume ((__trans == true) && (__pc == 12));
	testControl_start_In_Trace := false;
	__pc := 16;
} or {
	assume ((__trans == true) && (__pc == 16));
	__pc := (if ((main_system == S1) && testControl_start_In_system) then 18 else 17);
} or {
	assume ((__trans == true) && (__pc == 18));
	__pc := (if (main_system == S1) then 20 else 19);
} or {
	assume ((__trans == true) && (__pc == 20));
	logs_system := S1(exit);
	__pc := 19;
} or {
	assume ((__trans == true) && (__pc == 19));
	main_system := FS1;
	logs_system := FS1(entry);
	__pc := 17;
} or {
	assume ((__trans == true) && (__pc == 17));
	testControl_start_In_system := false;
	__pc := 21;
} or {
	assume ((__trans == true) && (__pc == 21));
	__pc := (if ((mainRegion_Trace == _0) && inOutCycleVariable_Trace) then 23 else 24);
} or {
	assume ((__trans == true) && (__pc == 23));
	__pc := (if (mainRegion_Trace == _0) then 26 else 25);
} or {
	assume ((__trans == true) && (__pc == 26));
	logs_Trace := _0(exit);
	__pc := 25;
} or {
	assume ((__trans == true) && (__pc == 25));
	testControl_start_In_system := true;
	mainRegion_Trace := _1;
	inputRegion_Trace := InputState;
	logs_Trace := InputState(entry);
	__pc := 22;
} or {
	assume ((__trans == true) && (__pc == 24));
	__pc := (if ((inputRegion_Trace == InputState) && inOutCycleVariable_Trace) then 27 else 22);
} or {
	assume ((__trans == true) && (__pc == 27));
	__pc := (if (inputRegion_Trace == InputState) then 29 else 28);
} or {
	assume ((__trans == true) && (__pc == 29));
	logs_Trace := InputState(exit);
	__pc := 28;
} or {
	assume ((__trans == true) && (__pc == 28));
	inputRegion_Trace := __Inactive__;
	logs_Trace := t(;
	__pc := 30;
} or {
	assume ((__trans == true) && (__pc == 30));
	__pc := (if testControl_start_In_Trace then 31 else 32);
} or {
	assume ((__trans == true) && (__pc == 31));
	testControl_start_In_system := true;
	inputRegion_Trace := InputState;
	logs_Trace := InputState(entry);
	__pc := 22;
} or {
	assume ((__trans == true) && (__pc == 32));
	inputRegion_Trace := InputState;
	logs_Trace := InputState(entry);
	__pc := 22;
} or {
	assume ((__trans == true) && (__pc == 22));
	__pc := (if (inOutCycleRegion_Trace == InOutCycleState) then 34 else 33);
} or {
	assume ((__trans == true) && (__pc == 34));
	__pc := (if (inOutCycleRegion_Trace == InOutCycleState) then 36 else 35);
} or {
	assume ((__trans == true) && (__pc == 36));
	logs_Trace := InOutCycleState(exit);
	__pc := 35;
} or {
	assume ((__trans == true) && (__pc == 35));
	inOutCycleVariable_Trace := (!(inOutCycleVariable_Trace));
	inOutCycleRegion_Trace := InOutCycleState;
	logs_Trace := InOutCycleState(entry);
	__pc := 33;
} or {
	assume ((__trans == true) && (__pc == 33));
	testControl_start_In_Trace := false;
	__pc := 0;
	__trans := false;
} or {
	assume ((__trans == false) && (__pc == 0));
	havoc testControl_start_In_Trace;
	__pc := 1;
} or {
	assume ((__trans == false) && (__pc == 1));
	__pc := 0;
	__trans := true;
}
init {
	inOutCycleVariable_Trace := false;
	mainRegion_Trace := __Inactive__;
	inOutCycleRegion_Trace := __Inactive__;
	inputRegion_Trace := __Inactive__;
	testControl_start_In_Trace := false;
	main_system := __Inactive__;
	testControl_start_In_system := false;
	mainRegion_Trace := _0;
	logs_Trace := t(;
	inOutCycleRegion_Trace := InOutCycleState;
	logs_system := t(;
	main_system := S1;
	if ((mainRegion_Trace == _0)) {
		logs_Trace := _0(entry);
	}
	else {
		if ((mainRegion_Trace == _1)) {
			logs_Trace := _1(entry);
			if ((inputRegion_Trace == InputState)) {
				logs_Trace := InputState(entry);
			}
		}
	}
	if ((inOutCycleRegion_Trace == InOutCycleState)) {
		logs_Trace := InOutCycleState(entry);
	}
	if ((main_system == S1)) {
		logs_system := S1(entry);
	}
	else {
		if ((main_system == FS1)) {
			logs_system := FS1(entry);
		}
	}
	if (((mainRegion_Trace == _0) && inOutCycleVariable_Trace)) {
		if ((mainRegion_Trace == _0)) {
			logs_Trace := _0(exit);
		}
		testControl_start_In_system := true;
		mainRegion_Trace := _1;
		inputRegion_Trace := InputState;
		logs_Trace := InputState(entry);
	}
	else {
		if (((inputRegion_Trace == InputState) && inOutCycleVariable_Trace)) {
			if ((inputRegion_Trace == InputState)) {
				logs_Trace := InputState(exit);
			}
			inputRegion_Trace := __Inactive__;
			logs_Trace := t(;
			if (testControl_start_In_Trace) {
				testControl_start_In_system := true;
				inputRegion_Trace := InputState;
				logs_Trace := InputState(entry);
			}
			else {
				inputRegion_Trace := InputState;
				logs_Trace := InputState(entry);
			}
		}
	}
	if ((inOutCycleRegion_Trace == InOutCycleState)) {
		if ((inOutCycleRegion_Trace == InOutCycleState)) {
			logs_Trace := InOutCycleState(exit);
		}
		inOutCycleVariable_Trace := (!(inOutCycleVariable_Trace));
		inOutCycleRegion_Trace := InOutCycleState;
		logs_Trace := InOutCycleState(entry);
	}
	testControl_start_In_Trace := false;
}
env {
}
