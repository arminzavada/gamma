//@splitted
//@noenv
type MainRegion_Trace : { __Inactive__, _0, _1 }
type InOutCycleRegion_Trace : { __Inactive__, InOutCycleState }
type InputRegion_Trace : { __Inactive__, InputState }
type TraceLogs : { None, Initial____0, InOutCycleInitialState___InOutCycleState, Entry__0, Entry__1, Entry_InputState, Entry_InOutCycleState, Exit_InputState, InputState___InputState, Entry_InputState, Exit__0, _0____1, InputInitialState___InputState, Entry__1, Entry_InputState, Exit_InOutCycleState, InOutCycleState___InOutCycleState, Entry_InOutCycleState }
type Main_Target : { __Inactive__, S1, FS1 }
type TargetLogs : { None, Initial___S1, Entry_S1, Entry_FS1, Exit_S1, S1___FS1, Entry_FS1 }
var testControl_start_In_Trace : boolean = false
ctrl var mainRegion_Trace : MainRegion_Trace = __Inactive__
ctrl var inOutCycleRegion_Trace : InOutCycleRegion_Trace = __Inactive__
ctrl var inputRegion_Trace : InputRegion_Trace = __Inactive__
var inOutCycleVariable_Trace : boolean = false
var logs_Trace : TraceLogs = None
var testControl_start_In_system : boolean = false
ctrl var main_system : Main_Target = __Inactive__
var logs_system : TargetLogs = None
var __pc : integer = 0
var __trans : boolean = false

trans {
	assume ((__trans == true) && (__pc == 0));
	__pc := (if ((mainRegion_Trace == _0) && inOutCycleVariable_Trace) then 2 else 3);
} or {
	assume ((__trans == true) && (__pc == 2));
	__pc := (if (mainRegion_Trace == _0) then 5 else 4);
} or {
	assume ((__trans == true) && (__pc == 5));
	logs_Trace := Exit__0;
	__pc := 4;
} or {
	assume ((__trans == true) && (__pc == 4));
	testControl_start_In_system := true;
	mainRegion_Trace := _1;
	inputRegion_Trace := InputState;
	logs_Trace := Entry_InputState;
	__pc := 1;
} or {
	assume ((__trans == true) && (__pc == 3));
	__pc := (if ((inputRegion_Trace == InputState) && testControl_start_In_Trace && inOutCycleVariable_Trace) then 6 else 1);
} or {
	assume ((__trans == true) && (__pc == 6));
	__pc := (if (inputRegion_Trace == InputState) then 8 else 7);
} or {
	assume ((__trans == true) && (__pc == 8));
	logs_Trace := Exit_InputState;
	__pc := 7;
} or {
	assume ((__trans == true) && (__pc == 7));
	testControl_start_In_system := true;
	inputRegion_Trace := InputState;
	logs_Trace := Entry_InputState;
	__pc := 1;
} or {
	assume ((__trans == true) && (__pc == 1));
	__pc := (if (inOutCycleRegion_Trace == InOutCycleState) then 10 else 9);
} or {
	assume ((__trans == true) && (__pc == 10));
	__pc := (if (inOutCycleRegion_Trace == InOutCycleState) then 12 else 11);
} or {
	assume ((__trans == true) && (__pc == 12));
	logs_Trace := Exit_InOutCycleState;
	__pc := 11;
} or {
	assume ((__trans == true) && (__pc == 11));
	inOutCycleVariable_Trace := (!(inOutCycleVariable_Trace));
	inOutCycleRegion_Trace := InOutCycleState;
	logs_Trace := Entry_InOutCycleState;
	__pc := 9;
} or {
	assume ((__trans == true) && (__pc == 9));
	testControl_start_In_Trace := false;
	__pc := 13;
} or {
	assume ((__trans == true) && (__pc == 13));
	__pc := (if ((main_system == S1) && testControl_start_In_system) then 15 else 14);
} or {
	assume ((__trans == true) && (__pc == 15));
	__pc := (if (main_system == S1) then 17 else 16);
} or {
	assume ((__trans == true) && (__pc == 17));
	logs_system := Exit_S1;
	__pc := 16;
} or {
	assume ((__trans == true) && (__pc == 16));
	main_system := FS1;
	logs_system := Entry_FS1;
	__pc := 14;
} or {
	assume ((__trans == true) && (__pc == 14));
	testControl_start_In_system := false;
	__pc := 18;
} or {
	assume ((__trans == true) && (__pc == 18));
	__pc := (if ((mainRegion_Trace == _0) && inOutCycleVariable_Trace) then 20 else 21);
} or {
	assume ((__trans == true) && (__pc == 20));
	__pc := (if (mainRegion_Trace == _0) then 23 else 22);
} or {
	assume ((__trans == true) && (__pc == 23));
	logs_Trace := Exit__0;
	__pc := 22;
} or {
	assume ((__trans == true) && (__pc == 22));
	testControl_start_In_system := true;
	mainRegion_Trace := _1;
	inputRegion_Trace := InputState;
	logs_Trace := Entry_InputState;
	__pc := 19;
} or {
	assume ((__trans == true) && (__pc == 21));
	__pc := (if ((inputRegion_Trace == InputState) && testControl_start_In_Trace && inOutCycleVariable_Trace) then 24 else 19);
} or {
	assume ((__trans == true) && (__pc == 24));
	__pc := (if (inputRegion_Trace == InputState) then 26 else 25);
} or {
	assume ((__trans == true) && (__pc == 26));
	logs_Trace := Exit_InputState;
	__pc := 25;
} or {
	assume ((__trans == true) && (__pc == 25));
	testControl_start_In_system := true;
	inputRegion_Trace := InputState;
	logs_Trace := Entry_InputState;
	__pc := 19;
} or {
	assume ((__trans == true) && (__pc == 19));
	__pc := (if (inOutCycleRegion_Trace == InOutCycleState) then 28 else 27);
} or {
	assume ((__trans == true) && (__pc == 28));
	__pc := (if (inOutCycleRegion_Trace == InOutCycleState) then 30 else 29);
} or {
	assume ((__trans == true) && (__pc == 30));
	logs_Trace := Exit_InOutCycleState;
	__pc := 29;
} or {
	assume ((__trans == true) && (__pc == 29));
	inOutCycleVariable_Trace := (!(inOutCycleVariable_Trace));
	inOutCycleRegion_Trace := InOutCycleState;
	logs_Trace := Entry_InOutCycleState;
	__pc := 27;
} or {
	assume ((__trans == true) && (__pc == 27));
	testControl_start_In_Trace := false;
	__pc := 0;
	__trans := false;
} or {
	assume ((__trans == false) && (__pc == 0));
	havoc testControl_start_In_Trace;
	__pc := 1;
} or {
	assume ((__trans == false) && (__pc == 1));
	__pc := 0;
	__trans := true;
}
init {
	inOutCycleVariable_Trace := false;
	mainRegion_Trace := __Inactive__;
	inOutCycleRegion_Trace := __Inactive__;
	inputRegion_Trace := __Inactive__;
	testControl_start_In_Trace := false;
	main_system := __Inactive__;
	testControl_start_In_system := false;
	mainRegion_Trace := _0;
	logs_Trace := InOutCycleInitialState___InOutCycleState;
	inOutCycleRegion_Trace := InOutCycleState;
	logs_system := Initial___S1;
	main_system := S1;
	if ((mainRegion_Trace == _0)) {
		logs_Trace := Entry__0;
	}
	else {
		if ((mainRegion_Trace == _1)) {
			logs_Trace := Entry__1;
			if ((inputRegion_Trace == InputState)) {
				logs_Trace := Entry_InputState;
			}
		}
	}
	if ((inOutCycleRegion_Trace == InOutCycleState)) {
		logs_Trace := Entry_InOutCycleState;
	}
	if ((main_system == S1)) {
		logs_system := Entry_S1;
	}
	else {
		if ((main_system == FS1)) {
			logs_system := Entry_FS1;
		}
	}
	if (((mainRegion_Trace == _0) && inOutCycleVariable_Trace)) {
		if ((mainRegion_Trace == _0)) {
			logs_Trace := Exit__0;
		}
		testControl_start_In_system := true;
		mainRegion_Trace := _1;
		inputRegion_Trace := InputState;
		logs_Trace := Entry_InputState;
	}
	else {
		if (((inputRegion_Trace == InputState) && testControl_start_In_Trace && inOutCycleVariable_Trace)) {
			if ((inputRegion_Trace == InputState)) {
				logs_Trace := Exit_InputState;
			}
			testControl_start_In_system := true;
			inputRegion_Trace := InputState;
			logs_Trace := Entry_InputState;
		}
	}
	if ((inOutCycleRegion_Trace == InOutCycleState)) {
		if ((inOutCycleRegion_Trace == InOutCycleState)) {
			logs_Trace := Exit_InOutCycleState;
		}
		inOutCycleVariable_Trace := (!(inOutCycleVariable_Trace));
		inOutCycleRegion_Trace := InOutCycleState;
		logs_Trace := Entry_InOutCycleState;
	}
	testControl_start_In_Trace := false;
}
env {
}
