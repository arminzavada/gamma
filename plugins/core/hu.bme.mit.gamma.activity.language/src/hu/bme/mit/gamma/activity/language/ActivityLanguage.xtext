grammar hu.bme.mit.gamma.activity.language.ActivityLanguage with hu.bme.mit.gamma.action.language.ActionLanguage

import "http://www.eclipse.org/emf/2002/Ecore" as Ecore
import "http://www.mit.bme.hu/gamma/expression/Model" as ConstraintModel 
import "http://www.mit.bme.hu/gamma/action/Model" as ActionModel 
import "http://www.mit.bme.hu/gamma/activity/Model"

ActivityNode returns ActivityNode:
	ConcreteNode |
	ControlNode
;

ConcreteNode returns PinnedNode:
	CompositeNode |
	ActionNode
;

CompositeNode returns CompositeNode:
	'action'
	name=ID
	(
		'('
			( (pins += Pin) (',' pins += Pin)* )?
		')'
	)?
	(
		'{'
			(activityNodes+=ActivityNode)*
			(flows+=Flow)*
		'}'
	)?
;

ActionNode returns ActionNode:
	'atomic' 'action'
	name=ID
	(
		'('
			( (pins += Pin) (',' pins += Pin)* )?
		')'
	)?
	action=Block
;

Flow returns Flow:
	ControlFlow |
	DataFlow
;

ControlFlow returns ControlFlow:
	'control' 'flow'
	'from' sourceNode=[ActivityNode] 
	'to' targetNode=[ActivityNode]
	('[' guard=Expression ']')?
;

DataFlow returns DataFlow:
	'data' 'flow'
	'from' dataSourceReference=DataSourceReference 
	'to' dataTargetReference=DataTargetReference
	('[' guard=Expression ']')?
;

ControlNode returns ControlNode:
	InitialNode |
	FinalNode |
	ForkNode |
	JoinNode |
	DecisionNode |
	MergeNode
;

InitialNode returns InitialNode:
	'initial' name=ID
;

FinalNode returns FinalNode:
	'final' name=ID
;

ForkNode returns ForkNode:
	'fork' name=ID
;

JoinNode returns JoinNode:
	'join' name=ID
;

DecisionNode returns DecisionNode:
	'decision' name=ID
;

MergeNode returns MergeNode:
	'merge' name=ID
;



Pin returns Pin:
	InputPin |
	OutputPin
;

InputPin returns InputPin:
	'in' name=ID ':' type=Type
;

OutputPin returns OutputPin:
	'out' name=ID ':' type=Type
;


DataSourceReference returns DataSourceReference:
	InsideInputPinReference |
	OutsideOutputPinReference
;
InsideInputPinReference returns InsideInputPinReference:
	'self' '.' inputPin=[InputPin]
;
OutsideOutputPinReference returns OutsideOutputPinReference:
	actionNode=[ActionNode] '.' outputPin=[OutputPin]
;

DataTargetReference returns DataTargetReference:
	OutsideInputPinReference |
	InsideOutputPinReference	
;
OutsideInputPinReference returns OutsideInputPinReference:
	actionNode=[ActionNode] '.' inputPin=[InputPin]
;
InsideOutputPinReference returns InsideOutputPinReference:
	'self' '.' outputPin=[OutputPin]
;

@Override
AssignableAccessExpression returns ConstraintModel::ReferenceExpression:
	super |
	InsideOutputPinReference
;

@Override
PrimaryExpression returns ConstraintModel::Expression:
	super | 
	InsideInputPinReference
;
