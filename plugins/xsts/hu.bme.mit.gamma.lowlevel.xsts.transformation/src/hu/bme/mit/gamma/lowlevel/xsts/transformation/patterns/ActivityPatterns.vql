/********************************************************************************
 * Copyright (c) 2018-2021 Contributors to the Gamma project
 *
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * SPDX-License-Identifier: EPL-1.0
 ********************************************************************************/
package hu.bme.mit.gamma.lowlevel.xsts.transformation.patterns

import epackage "http://www.mit.bme.hu/gamma/expression/Model"
import epackage "http://www.mit.bme.hu/gamma/action/Model"
import epackage "http://www.mit.bme.hu/gamma/activity/Model"
import epackage "http://www.mit.bme.hu/gamma/statechart/lowlevel/Model"

pattern nodes(activityNode : ActivityNode) {
	ActivityNode(activityNode);
}

pattern initialNodes(node : InitialNode) {
	InitialNode(node);
}

pattern flows(flow : Flow) {
	Flow(flow);
}

pattern pins(pin : Pin) {
	Pin(pin);
}

pattern inputFlows(flow: Flow, node: ActivityNode) {
	ControlFlow.targetNode(flow, node);
} or {
	DataFlow.dataTargetReference(flow, targetReference);
	DataNodeReference.dataNode(targetReference, node);
}

pattern outputFlows(flow: Flow, node: ActivityNode) {
	ControlFlow.sourceNode(flow, node);
} or {
	DataFlow.dataSourceReference(flow, sourceReference);
	DataNodeReference.dataNode(sourceReference, node);
}

pattern dataFlowDirectSourceType(flow: DataFlow, type: Type) {
	DataFlow.dataSourceReference(flow, sourceReference);
	InputPinReference(sourceReference);
	InputPinReference.inputPin(sourceReference, inputPin);
	Pin.type(inputPin, type);
}


pattern priorDataFlow(flow: DataFlow, previousFlow: DataFlow) {
	find sourceNode(flow, node);
	find targetNode(previousFlow, node);
} or {
	find sourcePin(flow, pin);
	find targetPin(previousFlow, pin);
}

pattern sourceNode(flow: Flow, node: ActivityNode) {
	DataFlow.dataSourceReference(flow, sourceReference);
	DataNodeReference.dataNode(sourceReference, node);
} or {
	ControlFlow.sourceNode(flow, node);
}

pattern targetNode(flow: Flow, node: ActivityNode) {
	DataFlow.dataTargetReference(flow, targetReference);
	DataNodeReference.dataNode(targetReference, node);
} or {
	ControlFlow.targetNode(flow, node);
}

pattern sourcePin(flow: DataFlow, pin: Pin) {
	DataFlow.dataSourceReference(flow, sourceReference);
	InputPinReference(sourceReference);
	InputPinReference.inputPin(sourceReference, pin);
} or {
	DataFlow.dataSourceReference(flow, sourceReference);
	OutputPinReference(sourceReference);
	OutputPinReference.outputPin(sourceReference, pin);
}

pattern targetPin(flow: DataFlow, pin: Pin) {
	DataFlow.dataTargetReference(flow, targetReference);
	InputPinReference(targetReference);
	InputPinReference.inputPin(targetReference, pin);
} or {
	DataFlow.dataTargetReference(flow, targetReference);
	OutputPinReference(targetReference);
	OutputPinReference.outputPin(targetReference, pin);
}

pattern dataFlowType(flow: DataFlow, type: Type) {
	find priorDataFlow*(flow, previous);
	find sourcePin(previous, pin);
	
	Pin.type(pin, type);
}
