/*
 * generated by Xtext 2.23.0
 */
grammar InternalTraceLanguage;

options {
	superClass=AbstractInternalContentAssistParser;
}

@lexer::header {
package hu.bme.mit.gamma.theta.trace.language.ide.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package hu.bme.mit.gamma.theta.trace.language.ide.contentassist.antlr.internal;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import hu.bme.mit.gamma.theta.trace.language.services.TraceLanguageGrammarAccess;

}
@parser::members {
	private TraceLanguageGrammarAccess grammarAccess;

	public void setGrammarAccess(TraceLanguageGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}

	@Override
	protected Grammar getGrammar() {
		return grammarAccess.getGrammar();
	}

	@Override
	protected String getValueForTokenName(String tokenName) {
		return tokenName;
	}
}

// Entry rule entryRuleXstsStateSequence
entryRuleXstsStateSequence
:
{ before(grammarAccess.getXstsStateSequenceRule()); }
	 ruleXstsStateSequence
{ after(grammarAccess.getXstsStateSequenceRule()); } 
	 EOF 
;

// Rule XstsStateSequence
ruleXstsStateSequence 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getXstsStateSequenceAccess().getGroup()); }
		(rule__XstsStateSequence__Group__0)
		{ after(grammarAccess.getXstsStateSequenceAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleXstsState
entryRuleXstsState
:
{ before(grammarAccess.getXstsStateRule()); }
	 ruleXstsState
{ after(grammarAccess.getXstsStateRule()); } 
	 EOF 
;

// Rule XstsState
ruleXstsState 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getXstsStateAccess().getGroup()); }
		(rule__XstsState__Group__0)
		{ after(grammarAccess.getXstsStateAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleExplState
entryRuleExplState
:
{ before(grammarAccess.getExplStateRule()); }
	 ruleExplState
{ after(grammarAccess.getExplStateRule()); } 
	 EOF 
;

// Rule ExplState
ruleExplState 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getExplStateAccess().getGroup()); }
		(rule__ExplState__Group__0)
		{ after(grammarAccess.getExplStateAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleVariableValuation
entryRuleVariableValuation
:
{ before(grammarAccess.getVariableValuationRule()); }
	 ruleVariableValuation
{ after(grammarAccess.getVariableValuationRule()); } 
	 EOF 
;

// Rule VariableValuation
ruleVariableValuation 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getVariableValuationAccess().getGroup()); }
		(rule__VariableValuation__Group__0)
		{ after(grammarAccess.getVariableValuationAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleValue
entryRuleValue
:
{ before(grammarAccess.getValueRule()); }
	 ruleValue
{ after(grammarAccess.getValueRule()); } 
	 EOF 
;

// Rule Value
ruleValue 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getValueAccess().getAlternatives()); }
		(rule__Value__Alternatives)
		{ after(grammarAccess.getValueAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Value__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getValueAccess().getSIMPLESTRINGTerminalRuleCall_0()); }
		RULE_SIMPLESTRING
		{ after(grammarAccess.getValueAccess().getSIMPLESTRINGTerminalRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getValueAccess().getINTTerminalRuleCall_1()); }
		RULE_INT
		{ after(grammarAccess.getValueAccess().getINTTerminalRuleCall_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__XstsStateSequence__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__XstsStateSequence__Group__0__Impl
	rule__XstsStateSequence__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__XstsStateSequence__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getXstsStateSequenceAccess().getXstsStateSequenceAction_0()); }
	()
	{ after(grammarAccess.getXstsStateSequenceAccess().getXstsStateSequenceAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__XstsStateSequence__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__XstsStateSequence__Group__1__Impl
	rule__XstsStateSequence__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__XstsStateSequence__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getXstsStateSequenceAccess().getXstsStateSequenceKeyword_1()); }
	'(XstsStateSequence'
	{ after(grammarAccess.getXstsStateSequenceAccess().getXstsStateSequenceKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__XstsStateSequence__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__XstsStateSequence__Group__2__Impl
	rule__XstsStateSequence__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__XstsStateSequence__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getXstsStateSequenceAccess().getStatesAssignment_2()); }
	(rule__XstsStateSequence__StatesAssignment_2)*
	{ after(grammarAccess.getXstsStateSequenceAccess().getStatesAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__XstsStateSequence__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__XstsStateSequence__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__XstsStateSequence__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getXstsStateSequenceAccess().getRightParenthesisKeyword_3()); }
	')'
	{ after(grammarAccess.getXstsStateSequenceAccess().getRightParenthesisKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__XstsState__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__XstsState__Group__0__Impl
	rule__XstsState__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__XstsState__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getXstsStateAccess().getXstsStateKeyword_0()); }
	'(XstsState'
	{ after(grammarAccess.getXstsStateAccess().getXstsStateKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__XstsState__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__XstsState__Group__1__Impl
	rule__XstsState__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__XstsState__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getXstsStateAccess().getAnnotationsAssignment_1()); }
	(rule__XstsState__AnnotationsAssignment_1)*
	{ after(grammarAccess.getXstsStateAccess().getAnnotationsAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__XstsState__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__XstsState__Group__2__Impl
	rule__XstsState__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__XstsState__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getXstsStateAccess().getStateAssignment_2()); }
	(rule__XstsState__StateAssignment_2)
	{ after(grammarAccess.getXstsStateAccess().getStateAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__XstsState__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__XstsState__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__XstsState__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getXstsStateAccess().getRightParenthesisKeyword_3()); }
	')'
	{ after(grammarAccess.getXstsStateAccess().getRightParenthesisKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ExplState__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ExplState__Group__0__Impl
	rule__ExplState__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ExplState__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExplStateAccess().getExplStateAction_0()); }
	()
	{ after(grammarAccess.getExplStateAccess().getExplStateAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ExplState__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ExplState__Group__1__Impl
	rule__ExplState__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ExplState__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExplStateAccess().getExplStateKeyword_1()); }
	'(ExplState'
	{ after(grammarAccess.getExplStateAccess().getExplStateKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ExplState__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ExplState__Group__2__Impl
	rule__ExplState__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ExplState__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExplStateAccess().getValuationsAssignment_2()); }
	(rule__ExplState__ValuationsAssignment_2)*
	{ after(grammarAccess.getExplStateAccess().getValuationsAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ExplState__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ExplState__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ExplState__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExplStateAccess().getRightParenthesisKeyword_3()); }
	')'
	{ after(grammarAccess.getExplStateAccess().getRightParenthesisKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__VariableValuation__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VariableValuation__Group__0__Impl
	rule__VariableValuation__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableValuation__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVariableValuationAccess().getLeftParenthesisKeyword_0()); }
	'('
	{ after(grammarAccess.getVariableValuationAccess().getLeftParenthesisKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableValuation__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VariableValuation__Group__1__Impl
	rule__VariableValuation__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableValuation__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVariableValuationAccess().getNameAssignment_1()); }
	(rule__VariableValuation__NameAssignment_1)
	{ after(grammarAccess.getVariableValuationAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableValuation__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VariableValuation__Group__2__Impl
	rule__VariableValuation__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableValuation__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVariableValuationAccess().getValueAssignment_2()); }
	(rule__VariableValuation__ValueAssignment_2)
	{ after(grammarAccess.getVariableValuationAccess().getValueAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableValuation__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VariableValuation__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableValuation__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVariableValuationAccess().getRightParenthesisKeyword_3()); }
	')'
	{ after(grammarAccess.getVariableValuationAccess().getRightParenthesisKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__XstsStateSequence__StatesAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getXstsStateSequenceAccess().getStatesXstsStateParserRuleCall_2_0()); }
		ruleXstsState
		{ after(grammarAccess.getXstsStateSequenceAccess().getStatesXstsStateParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__XstsState__AnnotationsAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getXstsStateAccess().getAnnotationsSIMPLESTRINGTerminalRuleCall_1_0()); }
		RULE_SIMPLESTRING
		{ after(grammarAccess.getXstsStateAccess().getAnnotationsSIMPLESTRINGTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__XstsState__StateAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getXstsStateAccess().getStateExplStateParserRuleCall_2_0()); }
		ruleExplState
		{ after(grammarAccess.getXstsStateAccess().getStateExplStateParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ExplState__ValuationsAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getExplStateAccess().getValuationsVariableValuationParserRuleCall_2_0()); }
		ruleVariableValuation
		{ after(grammarAccess.getExplStateAccess().getValuationsVariableValuationParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableValuation__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVariableValuationAccess().getNameSIMPLESTRINGTerminalRuleCall_1_0()); }
		RULE_SIMPLESTRING
		{ after(grammarAccess.getVariableValuationAccess().getNameSIMPLESTRINGTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableValuation__ValueAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVariableValuationAccess().getValueValueParserRuleCall_2_0()); }
		ruleValue
		{ after(grammarAccess.getVariableValuationAccess().getValueValueParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

RULE_SIMPLESTRING : RULE_SIMPLECHAR (RULE_SIMPLECHAR|RULE_INT)*;

fragment RULE_SIMPLECHAR : ('a'..'z'|'A'..'Z'|'_');

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
