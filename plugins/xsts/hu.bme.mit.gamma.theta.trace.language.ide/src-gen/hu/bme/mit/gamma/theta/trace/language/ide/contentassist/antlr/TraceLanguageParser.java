/*
 * generated by Xtext 2.23.0
 */
package hu.bme.mit.gamma.theta.trace.language.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import hu.bme.mit.gamma.theta.trace.language.ide.contentassist.antlr.internal.InternalTraceLanguageParser;
import hu.bme.mit.gamma.theta.trace.language.services.TraceLanguageGrammarAccess;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;

public class TraceLanguageParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(TraceLanguageGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, TraceLanguageGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getValueAccess().getAlternatives(), "rule__Value__Alternatives");
			builder.put(grammarAccess.getXstsStateSequenceAccess().getGroup(), "rule__XstsStateSequence__Group__0");
			builder.put(grammarAccess.getXstsStateAccess().getGroup(), "rule__XstsState__Group__0");
			builder.put(grammarAccess.getExplStateAccess().getGroup(), "rule__ExplState__Group__0");
			builder.put(grammarAccess.getVariableValuationAccess().getGroup(), "rule__VariableValuation__Group__0");
			builder.put(grammarAccess.getXstsStateSequenceAccess().getStatesAssignment_2(), "rule__XstsStateSequence__StatesAssignment_2");
			builder.put(grammarAccess.getXstsStateAccess().getAnnotationsAssignment_1(), "rule__XstsState__AnnotationsAssignment_1");
			builder.put(grammarAccess.getXstsStateAccess().getStateAssignment_2(), "rule__XstsState__StateAssignment_2");
			builder.put(grammarAccess.getExplStateAccess().getValuationsAssignment_2(), "rule__ExplState__ValuationsAssignment_2");
			builder.put(grammarAccess.getVariableValuationAccess().getNameAssignment_1(), "rule__VariableValuation__NameAssignment_1");
			builder.put(grammarAccess.getVariableValuationAccess().getValueAssignment_2(), "rule__VariableValuation__ValueAssignment_2");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private TraceLanguageGrammarAccess grammarAccess;

	@Override
	protected InternalTraceLanguageParser createParser() {
		InternalTraceLanguageParser result = new InternalTraceLanguageParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public TraceLanguageGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(TraceLanguageGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
