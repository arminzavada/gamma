/*
 * generated by Xtext 2.23.0
 */
grammar InternalTraceLanguage;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package hu.bme.mit.gamma.theta.trace.language.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package hu.bme.mit.gamma.theta.trace.language.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import hu.bme.mit.gamma.theta.trace.language.services.TraceLanguageGrammarAccess;

}

@parser::members {

 	private TraceLanguageGrammarAccess grammarAccess;

    public InternalTraceLanguageParser(TokenStream input, TraceLanguageGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "XstsStateSequence";
   	}

   	@Override
   	protected TraceLanguageGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleXstsStateSequence
entryRuleXstsStateSequence returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getXstsStateSequenceRule()); }
	iv_ruleXstsStateSequence=ruleXstsStateSequence
	{ $current=$iv_ruleXstsStateSequence.current; }
	EOF;

// Rule XstsStateSequence
ruleXstsStateSequence returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getXstsStateSequenceAccess().getXstsStateSequenceAction_0(),
					$current);
			}
		)
		otherlv_1='(XstsStateSequence'
		{
			newLeafNode(otherlv_1, grammarAccess.getXstsStateSequenceAccess().getXstsStateSequenceKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getXstsStateSequenceAccess().getStatesXstsStateParserRuleCall_2_0());
				}
				lv_states_2_0=ruleXstsState
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getXstsStateSequenceRule());
					}
					add(
						$current,
						"states",
						lv_states_2_0,
						"hu.bme.mit.gamma.theta.trace.language.TraceLanguage.XstsState");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_3=')'
		{
			newLeafNode(otherlv_3, grammarAccess.getXstsStateSequenceAccess().getRightParenthesisKeyword_3());
		}
	)
;

// Entry rule entryRuleXstsState
entryRuleXstsState returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getXstsStateRule()); }
	iv_ruleXstsState=ruleXstsState
	{ $current=$iv_ruleXstsState.current; }
	EOF;

// Rule XstsState
ruleXstsState returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='(XstsState'
		{
			newLeafNode(otherlv_0, grammarAccess.getXstsStateAccess().getXstsStateKeyword_0());
		}
		(
			(
				lv_annotations_1_0=RULE_SIMPLESTRING
				{
					newLeafNode(lv_annotations_1_0, grammarAccess.getXstsStateAccess().getAnnotationsSIMPLESTRINGTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getXstsStateRule());
					}
					addWithLastConsumed(
						$current,
						"annotations",
						lv_annotations_1_0,
						"hu.bme.mit.gamma.theta.trace.language.TraceLanguage.SIMPLESTRING");
				}
			)
		)*
		(
			(
				{
					newCompositeNode(grammarAccess.getXstsStateAccess().getStateExplStateParserRuleCall_2_0());
				}
				lv_state_2_0=ruleExplState
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getXstsStateRule());
					}
					set(
						$current,
						"state",
						lv_state_2_0,
						"hu.bme.mit.gamma.theta.trace.language.TraceLanguage.ExplState");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_3=')'
		{
			newLeafNode(otherlv_3, grammarAccess.getXstsStateAccess().getRightParenthesisKeyword_3());
		}
	)
;

// Entry rule entryRuleExplState
entryRuleExplState returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getExplStateRule()); }
	iv_ruleExplState=ruleExplState
	{ $current=$iv_ruleExplState.current; }
	EOF;

// Rule ExplState
ruleExplState returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getExplStateAccess().getExplStateAction_0(),
					$current);
			}
		)
		otherlv_1='(ExplState'
		{
			newLeafNode(otherlv_1, grammarAccess.getExplStateAccess().getExplStateKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getExplStateAccess().getValuationsVariableValuationParserRuleCall_2_0());
				}
				lv_valuations_2_0=ruleVariableValuation
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getExplStateRule());
					}
					add(
						$current,
						"valuations",
						lv_valuations_2_0,
						"hu.bme.mit.gamma.theta.trace.language.TraceLanguage.VariableValuation");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_3=')'
		{
			newLeafNode(otherlv_3, grammarAccess.getExplStateAccess().getRightParenthesisKeyword_3());
		}
	)
;

// Entry rule entryRuleVariableValuation
entryRuleVariableValuation returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getVariableValuationRule()); }
	iv_ruleVariableValuation=ruleVariableValuation
	{ $current=$iv_ruleVariableValuation.current; }
	EOF;

// Rule VariableValuation
ruleVariableValuation returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='('
		{
			newLeafNode(otherlv_0, grammarAccess.getVariableValuationAccess().getLeftParenthesisKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_SIMPLESTRING
				{
					newLeafNode(lv_name_1_0, grammarAccess.getVariableValuationAccess().getNameSIMPLESTRINGTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getVariableValuationRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"hu.bme.mit.gamma.theta.trace.language.TraceLanguage.SIMPLESTRING");
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getVariableValuationAccess().getValueValueParserRuleCall_2_0());
				}
				lv_value_2_0=ruleValue
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getVariableValuationRule());
					}
					set(
						$current,
						"value",
						lv_value_2_0,
						"hu.bme.mit.gamma.theta.trace.language.TraceLanguage.Value");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_3=')'
		{
			newLeafNode(otherlv_3, grammarAccess.getVariableValuationAccess().getRightParenthesisKeyword_3());
		}
	)
;

// Entry rule entryRuleValue
entryRuleValue returns [String current=null]:
	{ newCompositeNode(grammarAccess.getValueRule()); }
	iv_ruleValue=ruleValue
	{ $current=$iv_ruleValue.current.getText(); }
	EOF;

// Rule Value
ruleValue returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		this_SIMPLESTRING_0=RULE_SIMPLESTRING
		{
			$current.merge(this_SIMPLESTRING_0);
		}
		{
			newLeafNode(this_SIMPLESTRING_0, grammarAccess.getValueAccess().getSIMPLESTRINGTerminalRuleCall_0());
		}
		    |
		this_INT_1=RULE_INT
		{
			$current.merge(this_INT_1);
		}
		{
			newLeafNode(this_INT_1, grammarAccess.getValueAccess().getINTTerminalRuleCall_1());
		}
	)
;

RULE_SIMPLESTRING : RULE_SIMPLECHAR (RULE_SIMPLECHAR|RULE_INT)*;

fragment RULE_SIMPLECHAR : ('a'..'z'|'A'..'Z'|'_');

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
