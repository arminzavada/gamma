/*
 * generated by Xtext 2.23.0
 */
package hu.bme.mit.gamma.theta.trace.language.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class TraceLanguageGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class XstsStateSequenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "hu.bme.mit.gamma.theta.trace.language.TraceLanguage.XstsStateSequence");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cXstsStateSequenceAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cXstsStateSequenceKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cStatesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cStatesXstsStateParserRuleCall_2_0 = (RuleCall)cStatesAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//XstsStateSequence:
		//	{XstsStateSequence}
		//	'(XstsStateSequence'
		//	states+=XstsState*
		//	')';
		@Override public ParserRule getRule() { return rule; }
		
		//{XstsStateSequence} '(XstsStateSequence' states+=XstsState* ')'
		public Group getGroup() { return cGroup; }
		
		//{XstsStateSequence}
		public Action getXstsStateSequenceAction_0() { return cXstsStateSequenceAction_0; }
		
		//'(XstsStateSequence'
		public Keyword getXstsStateSequenceKeyword_1() { return cXstsStateSequenceKeyword_1; }
		
		//states+=XstsState*
		public Assignment getStatesAssignment_2() { return cStatesAssignment_2; }
		
		//XstsState
		public RuleCall getStatesXstsStateParserRuleCall_2_0() { return cStatesXstsStateParserRuleCall_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class XstsStateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "hu.bme.mit.gamma.theta.trace.language.TraceLanguage.XstsState");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cXstsStateKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cAnnotationsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cAnnotationsSIMPLESTRINGTerminalRuleCall_1_0 = (RuleCall)cAnnotationsAssignment_1.eContents().get(0);
		private final Assignment cStateAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cStateExplStateParserRuleCall_2_0 = (RuleCall)cStateAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//XstsState:
		//	'(XstsState' annotations+=SIMPLESTRING*
		//	state=ExplState
		//	')';
		@Override public ParserRule getRule() { return rule; }
		
		//'(XstsState' annotations+=SIMPLESTRING* state=ExplState ')'
		public Group getGroup() { return cGroup; }
		
		//'(XstsState'
		public Keyword getXstsStateKeyword_0() { return cXstsStateKeyword_0; }
		
		//annotations+=SIMPLESTRING*
		public Assignment getAnnotationsAssignment_1() { return cAnnotationsAssignment_1; }
		
		//SIMPLESTRING
		public RuleCall getAnnotationsSIMPLESTRINGTerminalRuleCall_1_0() { return cAnnotationsSIMPLESTRINGTerminalRuleCall_1_0; }
		
		//state=ExplState
		public Assignment getStateAssignment_2() { return cStateAssignment_2; }
		
		//ExplState
		public RuleCall getStateExplStateParserRuleCall_2_0() { return cStateExplStateParserRuleCall_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class ExplStateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "hu.bme.mit.gamma.theta.trace.language.TraceLanguage.ExplState");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cExplStateAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cExplStateKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValuationsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValuationsVariableValuationParserRuleCall_2_0 = (RuleCall)cValuationsAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//ExplState:
		//	{ExplState}
		//	'(ExplState'
		//	valuations+=VariableValuation*
		//	')';
		@Override public ParserRule getRule() { return rule; }
		
		//{ExplState} '(ExplState' valuations+=VariableValuation* ')'
		public Group getGroup() { return cGroup; }
		
		//{ExplState}
		public Action getExplStateAction_0() { return cExplStateAction_0; }
		
		//'(ExplState'
		public Keyword getExplStateKeyword_1() { return cExplStateKeyword_1; }
		
		//valuations+=VariableValuation*
		public Assignment getValuationsAssignment_2() { return cValuationsAssignment_2; }
		
		//VariableValuation
		public RuleCall getValuationsVariableValuationParserRuleCall_2_0() { return cValuationsVariableValuationParserRuleCall_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class VariableValuationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "hu.bme.mit.gamma.theta.trace.language.TraceLanguage.VariableValuation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameSIMPLESTRINGTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueValueParserRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//VariableValuation:
		//	'(' name=SIMPLESTRING value=Value ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'(' name=SIMPLESTRING value=Value ')'
		public Group getGroup() { return cGroup; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }
		
		//name=SIMPLESTRING
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//SIMPLESTRING
		public RuleCall getNameSIMPLESTRINGTerminalRuleCall_1_0() { return cNameSIMPLESTRINGTerminalRuleCall_1_0; }
		
		//value=Value
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }
		
		//Value
		public RuleCall getValueValueParserRuleCall_2_0() { return cValueValueParserRuleCall_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class ValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "hu.bme.mit.gamma.theta.trace.language.TraceLanguage.Value");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSIMPLESTRINGTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Value:
		//	SIMPLESTRING | INT;
		@Override public ParserRule getRule() { return rule; }
		
		//SIMPLESTRING | INT
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//SIMPLESTRING
		public RuleCall getSIMPLESTRINGTerminalRuleCall_0() { return cSIMPLESTRINGTerminalRuleCall_0; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_1() { return cINTTerminalRuleCall_1; }
	}
	
	
	private final XstsStateSequenceElements pXstsStateSequence;
	private final XstsStateElements pXstsState;
	private final ExplStateElements pExplState;
	private final VariableValuationElements pVariableValuation;
	private final ValueElements pValue;
	private final TerminalRule tSIMPLESTRING;
	private final TerminalRule tSIMPLECHAR;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public TraceLanguageGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pXstsStateSequence = new XstsStateSequenceElements();
		this.pXstsState = new XstsStateElements();
		this.pExplState = new ExplStateElements();
		this.pVariableValuation = new VariableValuationElements();
		this.pValue = new ValueElements();
		this.tSIMPLESTRING = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "hu.bme.mit.gamma.theta.trace.language.TraceLanguage.SIMPLESTRING");
		this.tSIMPLECHAR = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "hu.bme.mit.gamma.theta.trace.language.TraceLanguage.SIMPLECHAR");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("hu.bme.mit.gamma.theta.trace.language.TraceLanguage".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//XstsStateSequence:
	//	{XstsStateSequence}
	//	'(XstsStateSequence'
	//	states+=XstsState*
	//	')';
	public XstsStateSequenceElements getXstsStateSequenceAccess() {
		return pXstsStateSequence;
	}
	
	public ParserRule getXstsStateSequenceRule() {
		return getXstsStateSequenceAccess().getRule();
	}
	
	//XstsState:
	//	'(XstsState' annotations+=SIMPLESTRING*
	//	state=ExplState
	//	')';
	public XstsStateElements getXstsStateAccess() {
		return pXstsState;
	}
	
	public ParserRule getXstsStateRule() {
		return getXstsStateAccess().getRule();
	}
	
	//ExplState:
	//	{ExplState}
	//	'(ExplState'
	//	valuations+=VariableValuation*
	//	')';
	public ExplStateElements getExplStateAccess() {
		return pExplState;
	}
	
	public ParserRule getExplStateRule() {
		return getExplStateAccess().getRule();
	}
	
	//VariableValuation:
	//	'(' name=SIMPLESTRING value=Value ')';
	public VariableValuationElements getVariableValuationAccess() {
		return pVariableValuation;
	}
	
	public ParserRule getVariableValuationRule() {
		return getVariableValuationAccess().getRule();
	}
	
	//Value:
	//	SIMPLESTRING | INT;
	public ValueElements getValueAccess() {
		return pValue;
	}
	
	public ParserRule getValueRule() {
		return getValueAccess().getRule();
	}
	
	//terminal SIMPLESTRING:
	//	SIMPLECHAR (SIMPLECHAR | INT)*;
	public TerminalRule getSIMPLESTRINGRule() {
		return tSIMPLESTRING;
	}
	
	//terminal SIMPLECHAR:
	//	'a'..'z' | 'A'..'Z' | '_';
	public TerminalRule getSIMPLECHARRule() {
		return tSIMPLECHAR;
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
