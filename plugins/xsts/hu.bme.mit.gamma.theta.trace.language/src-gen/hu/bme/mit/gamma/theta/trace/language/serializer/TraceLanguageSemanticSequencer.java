/*
 * generated by Xtext 2.23.0
 */
package hu.bme.mit.gamma.theta.trace.language.serializer;

import com.google.inject.Inject;
import hu.bme.mit.gamma.theta.trace.language.services.TraceLanguageGrammarAccess;
import hu.bme.mit.gamma.theta.trace.model.ExplState;
import hu.bme.mit.gamma.theta.trace.model.TraceModelPackage;
import hu.bme.mit.gamma.theta.trace.model.VariableValuation;
import hu.bme.mit.gamma.theta.trace.model.XstsState;
import hu.bme.mit.gamma.theta.trace.model.XstsStateSequence;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;

@SuppressWarnings("all")
public class TraceLanguageSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private TraceLanguageGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == TraceModelPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case TraceModelPackage.EXPL_STATE:
				sequence_ExplState(context, (ExplState) semanticObject); 
				return; 
			case TraceModelPackage.VARIABLE_VALUATION:
				sequence_VariableValuation(context, (VariableValuation) semanticObject); 
				return; 
			case TraceModelPackage.XSTS_STATE:
				sequence_XstsState(context, (XstsState) semanticObject); 
				return; 
			case TraceModelPackage.XSTS_STATE_SEQUENCE:
				sequence_XstsStateSequence(context, (XstsStateSequence) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     ExplState returns ExplState
	 *
	 * Constraint:
	 *     valuations+=VariableValuation*
	 */
	protected void sequence_ExplState(ISerializationContext context, ExplState semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     VariableValuation returns VariableValuation
	 *
	 * Constraint:
	 *     (name=SIMPLESTRING value=Value)
	 */
	protected void sequence_VariableValuation(ISerializationContext context, VariableValuation semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, TraceModelPackage.Literals.VARIABLE_VALUATION__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, TraceModelPackage.Literals.VARIABLE_VALUATION__NAME));
			if (transientValues.isValueTransient(semanticObject, TraceModelPackage.Literals.VARIABLE_VALUATION__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, TraceModelPackage.Literals.VARIABLE_VALUATION__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getVariableValuationAccess().getNameSIMPLESTRINGTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getVariableValuationAccess().getValueValueParserRuleCall_2_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     XstsStateSequence returns XstsStateSequence
	 *
	 * Constraint:
	 *     states+=XstsState*
	 */
	protected void sequence_XstsStateSequence(ISerializationContext context, XstsStateSequence semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     XstsState returns XstsState
	 *
	 * Constraint:
	 *     (annotations+=SIMPLESTRING* state=ExplState)
	 */
	protected void sequence_XstsState(ISerializationContext context, XstsState semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
