/********************************************************************************
 * Copyright (c) 2023 Contributors to the Gamma project
 *
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * SPDX-License-Identifier: EPL-1.0
 ********************************************************************************/
grammar hu.bme.mit.gamma.fei.language.FaultExtensionLanguage with hu.bme.mit.gamma.statechart.language.StatechartLanguage

import "http://www.mit.bme.hu/gamma/fei/Model"
import "http://www.eclipse.org/emf/2002/Ecore" as ecore
import "http://www.mit.bme.hu/gamma/statechart/Model/Interface" as interface
import "http://www.mit.bme.hu/gamma/statechart/Model/Composite" as composite
import "http://www.mit.bme.hu/gamma/expression/Model" as expression

FaultExtensionInstructions returns FaultExtensionInstructions:
	'import' imports+=[interface::Package | STRING]
	'fault-extension' name=ID 'for' component=[interface::Component]
	(faultSlices+=FaultSlice)*
	(commonCauses=CommonCauses)?
;

FaultSlice returns FaultSlice:
	'slice' name=ID 'affects' affectedElements+=ComponentInstanceStateExpression (',' affectedElements+=ComponentInstanceStateExpression)*
		'with' (faultModes+=FaultMode)+
;

FaultMode returns FaultMode:
	'mode' name=ID ('('probability=Expression')')? (localDynamics=LocalDynamics)? effect=Effect
;

CommonCauses returns CommonCauses:
	{CommonCauses} 'common-causes' 
;

enum LocalDynamics returns LocalDynamics:
				PERMANENT = 'permanent' | TRANSIENT = 'transient';

Effect returns Effect:
	StuckAtEffect | FrozenEffect | NonDeterminismEffect | NonDeterminismBooleanEffect |
		ConditionalEffect | RampDownEffect | InvertedEffect | StuckAtFixedEffect | RandomEffect |
			ErroneousEffect | DeltaOutEffect | DeltaInErroneousEffect | DeltaInRandomEffect
;

StuckAtEffect returns StuckAtEffect:
	'stuck-at' '{'
		('reference-mode' ':' termReferenceMode=TermReferenceMode)?
		('occurrence' ':'  occurrence=Occurrence)?
		('term' ':' term=Expression)
		(
			('input' ':' input=ComponentInstanceStateExpression)
			('varout' ':' varout=ComponentInstanceStateExpression)
		)?
		('failure-event' ':' failureEvent=ComponentInstanceEventReferenceExpression)?
		(template+=Template)?
	'}'
;

FrozenEffect returns FrozenEffect:
	{FrozenEffect} 'frozen' '{'
		(
			('input' ':' input=ComponentInstanceStateExpression)
			('varout' ':' varout=ComponentInstanceStateExpression)
		)?
		('failure-event' ':' failureEvent=ComponentInstanceEventReferenceExpression)?
		(template+=Template)?
	'}'
;

NonDeterminismEffect returns NonDeterminismEffect:
	'nondeterminism' '{'
		('reference-mode' ':' termReferenceMode=TermReferenceMode)?
		('occurrence' ':'  occurrence=Occurrence)?
		('minimum' ':' minimum=Expression)
		('maximum' ':' maximum=Expression)
		(
			('input' ':' input=ComponentInstanceStateExpression)
			('varout' ':' varout=ComponentInstanceStateExpression)
		)?
		('failure-event' ':' failureEvent=ComponentInstanceEventReferenceExpression)?
		(template+=Template)?
	'}'
;

NonDeterminismBooleanEffect returns NonDeterminismBooleanEffect:
	{NonDeterminismBooleanEffect} 'nondeterminism-boolean' '{'
		('reference-mode' ':' termReferenceMode=TermReferenceMode)?
		(
			('input' ':' input=ComponentInstanceStateExpression)
			('varout' ':' varout=ComponentInstanceStateExpression)
		)?
		('failure-event' ':' failureEvent=ComponentInstanceEventReferenceExpression)?
		(template+=Template)?
	'}'
;

ConditionalEffect returns ConditionalEffect:
	'conditional' '{'
		('occurrence' ':'  occurrence=Occurrence)?
		('condition' ':' condition=Expression)
		('then' ':' then=Expression)
		('else' ':' else=Expression)
		(
			('input' ':' input=ComponentInstanceStateExpression)
			('varout' ':' varout=ComponentInstanceStateExpression)
		)?
		('failure-event' ':' failureEvent=ComponentInstanceEventReferenceExpression)?
		(template+=Template)?
	'}'
;

RampDownEffect returns RampDownEffect:
	'ramp-down' '{'
		('delta' ':' delta=Expression)
		('bound' ':' bound=Expression)
		(
			('input' ':' input=ComponentInstanceStateExpression)
			('varout' ':' varout=ComponentInstanceStateExpression)
		)?
		('failure-event' ':' failureEvent=ComponentInstanceEventReferenceExpression)?
		(template+=Template)?
	'}'
;

InvertedEffect returns InvertedEffect:
	{InvertedEffect} 'inverted' '{'
		(
			('input' ':' input=ComponentInstanceStateExpression)
			('varout' ':' varout=ComponentInstanceStateExpression)
		)?
		('failure-event' ':' failureEvent=ComponentInstanceEventReferenceExpression)?
		(template+=Template)?
	'}'
;

StuckAtFixedEffect returns StuckAtFixedEffect:
	{StuckAtFixedEffect} 'stuck-at-fixed' '{'
		(
			('input' ':' input=ComponentInstanceStateExpression)
			('varout' ':' varout=ComponentInstanceStateExpression)
		)?
		('failure-event' ':' failureEvent=ComponentInstanceEventReferenceExpression)?
		(template+=Template)?
	'}'
;

RandomEffect returns RandomEffect:
	{RandomEffect} 'random' '{'
		('reference-mode' ':' termReferenceMode=TermReferenceMode)?
		(
			('input' ':' input=ComponentInstanceStateExpression)
			('varout' ':' varout=ComponentInstanceStateExpression)
		)?
		('failure-event' ':' failureEvent=ComponentInstanceEventReferenceExpression)?
		(template+=Template)?
	'}'
;

ErroneousEffect returns ErroneousEffect:
	{ErroneousEffect} 'erroneous' '{'
		('reference-mode' ':' termReferenceMode=TermReferenceMode)?
		(
			('input' ':' input=ComponentInstanceStateExpression)
			('varout' ':' varout=ComponentInstanceStateExpression)
		)?
		('failure-event' ':' failureEvent=ComponentInstanceEventReferenceExpression)?
		(template+=Template)?
	'}'
;

DeltaOutEffect returns DeltaOutEffect:
	'delta-out' '{'
		('reference-mode' ':' termReferenceMode=TermReferenceMode)?
		('delta' ':' delta=Expression)
		(
			('input' ':' input=ComponentInstanceStateExpression)
			('varout' ':' varout=ComponentInstanceStateExpression)
		)?
		('failure-event' ':' failureEvent=ComponentInstanceEventReferenceExpression)?
		(template+=Template)?
	'}'
;

DeltaInRandomEffect returns DeltaInRandomEffect:
	'delta-in-random' '{'
		('reference-mode' ':' termReferenceMode=TermReferenceMode)?
		('delta' ':' delta=Expression)
		(
			('input' ':' input=ComponentInstanceStateExpression)
			('varout' ':' varout=ComponentInstanceStateExpression)
		)?
		('failure-event' ':' failureEvent=ComponentInstanceEventReferenceExpression)?
		(template+=Template)?
	'}'
;

DeltaInErroneousEffect returns DeltaInErroneousEffect:
	'delta-in-erroneous' '{'
		('reference-mode' ':' termReferenceMode=TermReferenceMode)?
		('delta' ':' delta=Expression)
		(
			('input' ':' input=ComponentInstanceStateExpression)
			('varout' ':' varout=ComponentInstanceStateExpression)
		)?
		('failure-event' ':' failureEvent=ComponentInstanceEventReferenceExpression)?
		(template+=Template)?
	'}'
;
	
Template returns Template:
	SelfFixTemplate
;

SelfFixTemplate returns SelfFixTemplate:
	{SelfFixTemplate} 'template' ':' 'self-fix' ('{'
		('event' ':' selfFixEvent=ComponentInstanceEventReferenceExpression)?
	'}')?
;

enum Occurrence returns Occurrence:
				INSTANTANEOUS = 'instantaneous' | DELAYED = 'delayed';

enum TermReferenceMode returns TermReferenceMode:
				REFERENCE = 'reference' | VALUE = 'value';
				

// Literals

@Override
PrimaryExpression returns expression::Expression:
	LiteralExpression |
	ComponentInstanceStateExpression |
	'(' Expression ')'
;

//
