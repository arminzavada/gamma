package normal
import "/hu.bme.mit.gamma.tutorial.contract.finish/model/Interfaces/Interfaces.gcd"
import "/hu.bme.mit.gamma.tutorial.contract.finish/model/Controller/Controller.gcd"
import "/hu.bme.mit.gamma.tutorial.contract.finish/model/TrafficLight/TrafficLightCtrl.gcd"
import "/hu.bme.mit.gamma.tutorial.contract.finish/model/Crossroad.gcd"
@TransitionPriority = value-based
@ScenarioContractStatechart = Crossroad (permissive)
statechart Normal [
	port police : requires PoliceInterrupt
	port policeREVERSED : provides PoliceInterrupt
	port priorityOutput : provides LightCommands
	port priorityOutputREVERSED : requires LightCommands
	port secondaryOutput : provides LightCommands
	port secondaryOutputREVERSED : requires LightCommands
] {
	var result : integer := 0
	var IteratingVariable : integer := 0
	var LoopIteratingVariable : integer := 0
	timeout delay0
	timeout delay1
	timeout delay2
	transition from Initial to merge1 /
	result := 1;
	LoopIteratingVariable := 1;
	transition (2) from Choice1 to firstState [IteratingVariable <= 1] /
	IteratingVariable := IteratingVariable + 1;
	transition from merge1 to Choice1
	transition (3) from Choice1 to merge3 when priorityOutputREVERSED.displayYellow
		[IteratingVariable >= 0 and IteratingVariable <= 1] /
	raise priorityOutput.displayYellow;
	IteratingVariable := 0;
	transition (1) from Choice1 to hotViolation [else] /
	result := 0;
	transition from firstState to merge1 when cycle
	transition (2) from Choice3 to state0 [IteratingVariable <= 1] /
	IteratingVariable := IteratingVariable + 1;
	transition from merge3 to Choice3
	transition (3) from Choice3 to merge5 when priorityOutputREVERSED.displayRed &&
		secondaryOutputREVERSED.displayGreen && timeout delay0
	[IteratingVariable >= 0 and IteratingVariable <= 1] /
	raise priorityOutput.displayRed;
	raise secondaryOutput.displayGreen;
	IteratingVariable := 0;
	transition (1) from Choice3 to hotViolation [else] /
	result := 0;
	transition from state0 to merge3 when cycle
	transition (2) from Choice5 to state2 [IteratingVariable <= 1] /
	IteratingVariable := IteratingVariable + 1;
	transition from merge5 to Choice5
	transition (3) from Choice5 to merge7 when timeout delay1 &&
		secondaryOutputREVERSED.displayYellow [IteratingVariable >= 0 and IteratingVariable <= 1] /
	raise secondaryOutput.displayYellow;
	IteratingVariable := 0;
	transition (1) from Choice5 to hotViolation [else] /
	result := 0;
	transition from state2 to merge5 when cycle
	transition (2) from Choice7 to state4 [IteratingVariable <= 1] /
	IteratingVariable := IteratingVariable + 1;
	transition from merge7 to Choice7
	transition (3) from Choice7 to AcceptingState when secondaryOutputREVERSED.displayRed &&
		priorityOutputREVERSED.displayGreen && timeout delay2
	[IteratingVariable >= 0 and IteratingVariable <= 1] /
	raise secondaryOutput.displayRed;
	raise priorityOutput.displayGreen;
	IteratingVariable := 0;
	result := 2;
	transition (1) from Choice7 to hotViolation [else] /
	result := 0;
	transition from state4 to merge7 when cycle
	region ^region {
		initial Initial
		state firstState
		state hotViolation
		choice Choice1
		merge merge1
		state state0 {
			entry /
			set delay0 := 1000 ms;
		}
		choice Choice3
		merge merge3
		state state2 {
			entry /
			set delay1 := 2000 ms;
		}
		choice Choice5
		merge merge5
		state state4 {
			entry /
			set delay2 := 1000 ms;
		}
		choice Choice7
		merge merge7
		state AcceptingState
	}
}